---
title: "Assignment05"
format: html
Author: "Yosup Shin"
embed-resources: true
editor: "visual"
---

```{r}
#| label: setup
#| message: false
#| warning: false
library(tidyverse)
library(readxl)
library(sf)
library(lubridate)
library(dplyr)
library(tidycensus)
library(httr)
library(jsonlite)
library(testthat)
library(dotenv)
```

## 1. Data Loading & Cleaning
```{r}
crimes <- read_csv(
  "data/Crimes_-_2001_to_Present_20251020.csv",
col_types = cols(
  Longitude = col_character(),
  Latitude = col_character()
))

names(crimes) <- names(crimes) |>
  str_replace_all("\\s","_") |>
  str_to_lower()

```

## 2. Filtering the data to homicides within ten years of today
```{r}
crimes_lim <- crimes |>
  mutate(date = mdy_hms(date)) |>
  filter(date >= today(tz="") - years(10),
         !is.na(latitude),
         !is.na(longitude),
         primary_type == "HOMICIDE")
```

## 3. Convert Lon/Lat to Points Geometry
```{r}
crimes_lim <- crimes_lim |>
  st_as_sf(coords = c("longitude", "latitude"),
           crs = 4326,
           remove = FALSE)

crimes_lim |>
  ggplot() +
  geom_sf(aes(color = arrest),alpha = 0.3) +
  scale_colour_manual(
    values = c(
      "FALSE" = "pink",
      "TRUE" = "lightblue"
    )) 
```

## 4. Load Census Tracts, Perform a Spatial Join, and Create Choropleth

```{r}

chicago_data <- st_read("data/geo_export_74935939-21bb-469e-8d1f-e14171c59c67.shp") |>
  select(geoid10, geometry)

chicago_data <- st_transform(chicago_data, crs = 4326)

chicago_merged <- st_join(crimes_lim, chicago_data, join = st_within)

chicago_merged_agg <- chicago_merged |>
  st_drop_geometry() |>
  group_by(geoid10) |>
  summarize(count = n()) |>
  mutate(arrest_rate = (count/sum(count)))

chicago_merged_agg <- chicago_data |>
  left_join(chicago_merged_agg, by = "geoid10")

chicago_merged_agg |>
  filter(!is.na(count)) |>
  ggplot() +
  geom_sf(aes(fill=count),color = "white") + 
  scale_fill_gradient(high = "#cfe8f3", low = "navy",
  breaks = c(10, 20, 30, 40, 50)) +
  theme_void()

chicago_merged_agg |>
  filter(!is.na(arrest_rate)) |>
  ggplot(aes(fill=arrest_rate)) +
  geom_sf(color = "white", size = 0.05) + 
  scale_fill_gradient(
    high = "#cfe8f3", 
    low = "navy",
    labels = scales::percent_format(accuracy = 0.1)) +
  theme_void()
```

## 5. Using the Census API part 1
```{r}
library(dotenv)
load_dot_env()
credential <- Sys.getenv("census_api_key")
```

## 5.2
```{r}
retrived_data <- tidycensus::load_variables(2019, "acs5", cache = TRUE)

census_bureau_data <- get_acs(
  geography = "tract",
  state = "IL",
  county ="Cook",
  year = 2019,
  survey="acs5",
  variables = c(
    median_income = "B19013_001",
    bachelor = "B29002_007",
    poverty = "B29003_002"
  ),
  output = "wide"
)


url <- paste0("http://api.census.gov/data/2019/acs/acs5",
              "?get=NAME,B19013_001E,B29002_007E,B29003_002E",
              "&for=tract:*",
              "&in=state:17&in=county:031&key=",
              Sys.getenv("CENSUS_API_KEY"))

assignment_url <- GET(url = url)
http_status(assignment_url)

assignment_url <- content(assignment_url, as = "text")
assignment_matrix <- fromJSON(assignment_url)
assignment_data <- as_tibble(assignment_matrix[2:nrow(assignment_matrix), ],
                      .name_repair = "minimal")

names(assignment_data) <- assignment_matrix[1, ]
assignment_data


test_that("equal number of rows", {
  apidata <-nrow(assignment_data)
  
  tidycensus <- length(unique(census_bureau_data$GEOID))
  
  expect_equal(apidata,tidycensus)
  })
```




```
